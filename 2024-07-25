#include <iostream>
#include <vector>

#define INF 987654321

using namespace std;

// 알고리즘 문제 해결 전략 6.3 소풍 문제
int countPairings(const vector<vector<bool> >& areFriends, vector<bool>& taken)
{
    // taken을 순회하면서 false인 친구를 찾기
    int firstFree = -1;
    for(int i = 0; i < taken.size(); i++)
    {
        if(!taken[i])
        {
            firstFree = i;
            break;
        }
    }
    // 기저 사례 : false인 친구를 찾을 수 없다면 한가지 방법을 찾은 것
    if(firstFree == -1) return 1;
    
    int ret = 0;
    for(int i = firstFree+1; i < taken.size(); i++)
    {
        if(!taken[i] && areFriends[firstFree][i])
        {
            taken[firstFree] = taken[i] = true;
            ret += countPairings(areFriends, taken);
            taken[firstFree] = taken[i] = false;
        }
    }
    
    return ret;
}

// 알고리즘 문제해결전략 6.5 게임판 덮기 문제
bool isRange(int n, int m, int y, int x)
{
    return (y >= 0 && y < n && x >= 0 && x < m);
}

void swapColor(vector<string>& board, int coverL[4][3][2], char color, int set1, int y, int x)
{
    for(int j = 0; j < 3; j++)
    {
        int ny = y + coverL[set1][j][0];
        int nx = x + coverL[set1][j][1];
        board[ny][nx] = color;
    }
}

void printBoard(vector<string>& board)
{
    for(int i = 0; i < board.size(); i++)
    {
        for(int j = 0; j < board[i].size(); j++)
        {
            cout << board[i][j];
        }
        cout << "\n";
    }
}

int coverBoard(vector<string>& board)
{
    int y = -1, x = -1;
    for(int i = 0; i < board.size(); i++)
    {
        for(int j = 0; j < board[i].size(); j++)
        {
            if(board[i][j] == '.')
            {
                y = i; x = j;
                break;
            }
        }
        if(y != -1 && x != -1) break;
    }
    if(y == -1 && x == -1) return 1;
    
    int coverL[4][3][2] = {
        {{0, 0}, {1, 0}, {1, -1}},
        {{0, 0}, {1, 0}, {1, 1}},
        {{0, 0}, {0, 1}, {1, 0}},
        {{0, 0}, {0, 1}, {1, 1}}
    };
    int ret = 0;
    for(int i = 0; i < 4; i++)
    {
        bool canCover = true;
        for(int j = 0; j < 3; j++)
        {
            int ny = y + coverL[i][j][0];
            int nx = x + coverL[i][j][1];
            if(!isRange(board.size(), board[y].size(), ny, nx) || board[ny][nx] == '#')
            {
                canCover = false;
                break;
            }
        }
        if(canCover)
        {
            swapColor(board, coverL, '#', i, y, x);
            ret += coverBoard(board);
            //printBoard(board);
            //cout << "\n";
            swapColor(board, coverL, '.', i, y, x);
        }
    }
    return ret;
}

// 알고리즘 문제해결전략 165p 예제 : 여행하는 외판원 문제
double shortestPath(vector<vector<int> >& dist, vector<int>& path, vector<bool>& visited, double currentLength)
{
    // 기저 사례 : 모든 도시를 다 방문했다면, 현재 길이+처음으로 돌아가는 길의 길이를 반환
    if(path.size() == dist.size()) return currentLength + dist[path.back()][path[0]];
    double ret = INF;
    for(int next = 0; next < dist.size(); next++)
    {
        if(visited[next]) continue;
        int here = path.back();
        path.push_back(next);
        visited[next] = true;
        ret = min(ret, shortestPath(dist, path, visited, currentLength + dist[here][next]));
        path.pop_back();
        visited[next] = false;
    }
    
    return ret;
}

int main()
{
    int n, m;
    cin >> n >> m;
    vector<string> board;
    for(int i = 0; i < n; i++)
    {
        string s;
        cin >> s;
        board.push_back(s);
    }
    cout << coverBoard(board);

    return 0;
}
